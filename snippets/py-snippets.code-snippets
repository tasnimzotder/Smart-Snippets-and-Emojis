{
  "Linear Search": {
    "prefix": "!search_linear",
    "description": [
      "Linear Search",
      "Time Complexity: O(n)",
      "Space Complexity: O(1)"
    ],
    "body": [
      "def linearSearch(arr, x):",
      "\tfor i in range(len(arr)):",
      "\t\tif (arr[i] == x):",
      "\t\t\treturn i",
      "\treturn -1",
      "$0"
    ]
  },
  "Binary Search Iterative": {
    "prefix": "!search_binary_itr",
    "description": [
      "Binary Search Iterative",
      "Time Complexity: O(log(n))",
      "Space Complexity: O(n)"
    ],
    "body": [
      "def binarySearch(arr, low, high, x):",
      "\twhile low <= high:",
      "\t\tmid = low + (high - low)//2",
      "\n\t\tif arr[mid] == x:",
      "\t\t\treturn mid",
      "\n\t\telif arr[mid] < x:",
      "\t\t\tlow = mid + 1",
      "\n\t\telse:",
      "\t\t\thigh = mid - 1",
      "\treturn -1",
      "$0"
    ]
  },
  "Binary Search Recursive": {
    "prefix": "!search_binary_rec",
    "description": [
      "Binary Search Recursive",
      "Time Complexity: O(log(n))",
      "Space Complexity: O(n)"
    ],
    "body": [
      "def binarySearch(arr, low, high, x):",
      "\tif low <= high:",
      "\t\tmid = low + (high - low)//2",
      "\n\t\tif arr[mid] == x:",
      "\t\t\treturn mid",
      "\n\t\telif arr[mid] > x:",
      "\t\t\treturn binarySearch(arr, low, mid - 1, x)",
      "\n\t\telse:",
      "\t\t\treturn binarySearch(arr, mid + 1, high, x)",
      "\n\telse:",
      "\t\treturn -1",
      "$0"
    ]
  },
  "Bubble Sort": {
    "prefix": "!sort_bubble",
    "description": [
      "Bubble Sort",
      "Time Complexity: O(n^2)",
      "Space Complexity: O(1)"
    ],
    "body": [
      "def bubbleSort(arr):",
      "\tfor i in range(len(arr)):",
      "\t\tfor j in range(len(arr) - i - 1):",
      "\t\t\tif arr[j] > arr[j + 1]:",
      "\t\t\t\t(arr[j], arr[j  + 1]) = (arr[j + 1] + arr[j])",
      "$0"
    ]
  },
  "Insertion Sort": {
    "prefix": "!sort_insertion",
    "description": [
      "Insertion Sort",
      "Time Complexity: O(n^2)",
      "Space Complexity: O(1)"
    ],
    "body": [
      "def insertionSort(arr):",
      "\tfor step in range(1, len(arr)):",
      "\t\tkey = arr[step]",
      "\t\ti = step - 1",
      "\n\t\twhile i >= 0 and key < arr[i]:",
      "\t\t\tarr[i + 1] = arr[i]",
      "\t\t\ti -= 1",
      "\n\t\tarr[i + 1] = key",
      "$0"
    ]
  }
}
